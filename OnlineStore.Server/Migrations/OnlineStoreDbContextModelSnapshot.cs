// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Data;

#nullable disable

namespace OnlineStore.Server.Migrations
{
    [DbContext(typeof(OnlineStoreDbContext))]
    partial class OnlineStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            Name = "Электроника"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            Name = "Фурнитруа"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            Name = "Одежда"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0da4f0d6-f312-4f0f-9b40-eaff18d8d99d"),
                            Address = "Address 1",
                            Code = "0001-2021",
                            Name = "Customer 1",
                            UserId = new Guid("afa77327-08a9-40ca-9ab3-39e0ff7ab47d")
                        },
                        new
                        {
                            Id = new Guid("0da4f0d6-f312-4f0f-9b40-eaff18d8d98d"),
                            Address = "Address 2",
                            Code = "0002-2021",
                            Name = "Customer 2",
                            UserId = new Guid("afa77327-08a9-40ca-9ab3-39e0ff7ab48d")
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a77e5635-475c-4351-9f8d-8e1d9cfc9ec5"),
                            CategoryId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            Code = "01-0001-A001",
                            Name = "Item 1",
                            Price = 10.0
                        },
                        new
                        {
                            Id = new Guid("11ccb803-2819-4a3c-bf27-0a45e1f943ad"),
                            CategoryId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            Code = "02-0002-B002",
                            Name = "Item 2",
                            Price = 20.0
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ShipmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StatusId")
                        .HasMaxLength(50)
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineStore.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<double>("ItemPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("197abfaa-4ae4-431f-9082-04e5e70799ab"),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("f2058115-0e96-4deb-9fec-79dbab43899d"),
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Name = "Новый"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440004"),
                            Name = "Выполняется"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440005"),
                            Name = "Выаолнен"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e2694c8-e6f0-41d4-8faf-e084ab629ee4"),
                            Password = "1231",
                            RoleId = new Guid("197abfaa-4ae4-431f-9082-04e5e70799ab"),
                            Username = "Manager"
                        },
                        new
                        {
                            Id = new Guid("afa77327-08a9-40ca-9ab3-39e0ff7ab47d"),
                            Password = "1231",
                            RoleId = new Guid("f2058115-0e96-4deb-9fec-79dbab43899d"),
                            Username = "Customer"
                        },
                        new
                        {
                            Id = new Guid("afa77327-08a9-40ca-9ab3-39e0ff7ab48d"),
                            Password = "1231",
                            RoleId = new Guid("f2058115-0e96-4deb-9fec-79dbab43899d"),
                            Username = "Customer"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Customer", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("OnlineStore.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.Item", b =>
                {
                    b.HasOne("OnlineStore.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineStore.Models.Order", b =>
                {
                    b.HasOne("OnlineStore.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("OnlineStore.Models.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.HasOne("OnlineStore.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OnlineStore.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineStore.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineStore.Models.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
